---
import BaseHead from "../components/BaseHead.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../consts";
import NavigationSidebar from "../components/NavigationSidebar.astro";
import ProjectShowcaseComponent from "@/components/Projects/ProjectShowcaseComponent.astro";

// import InfoAndControalBar from "@/components/Projects/InfoAndControalBar.astro";

const projectsData = [
  {
    title: "ThePeriodicTable",
    repoName: "ThePeriodicTable",
    description:
      "All Data & design is from National Institutes of Health (.gov) 'USA' Link: https://pubchem.ncbi.nlm.nih.gov/periodic-table",
    demoLink: "https://the-periodic-table-of-elements.netlify.app",
    screenshotsPreview: [
      "the-periodic-table/the-periodic-table-of-elements.netlify.app_.png",
      "the-periodic-table/Screenshot 2023-09-12 112556.jpg",
      "the-periodic-table/Screenshot 2025-08-17 021449.jpg",
    ],
    youtubePreviewId: "_4ep-S8eDcY",
    wakatimeId: "c1682788-77f6-488c-8f31-b81775d2faf7",
    languageAndTools: [
      "TypeScript",
      "JavaScript",
      "CSS",
      "HTML",
      "Vite-Light",
      "TailwindCSS-Light",
      "React-Light",
      "Netlify-Light",
    ],
  },
];
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <style>
      /* ----------------- SCROLLBAR ----------------- */
      body {
        scrollbar-color: #7373738a #0a0a0a;
        scrollbar-width: thin;
        scroll-behavior: smooth;
      }
    </style>
  </head>
  <body class="md:pl-[47px]">
    <NavigationSidebar HighlightedSectionName="projects" />
    <div
      class="w-full h-[calc(100vh-49px)] md:min-h-screen bg-neutral-950 py-5 lg:py-10 overflow-y-auto grid grid-cols-1 gap-y-10 px-2"
    >
      <!-- --------------------- -->

      <ProjectShowcaseComponent projectID="0" projectsData={projectsData[0]} />
      <!-- <ProjectShowcaseComponent projectID="1" projectsData={projectsData[0]} /> -->

      <!-- --------------------- -->
    </div>
  </body>
</html>

<script>
  // -----  Projects  ----- //
  // NextPreviousProjectPreviewBtns(0);
  // NextPreviousProjectPreviewBtns(1);

  // --------------------- //
  function NextPreviousProjectPreviewBtns(projectID: number) {
    const project1 = document.getElementById(`project-${projectID}`);
    const previewImg = project1?.querySelector("div:first-child > img");
    const previousBtn = project1?.querySelector("div:nth-child(2) > button");
    const nextBtn = project1?.querySelector(
      "div:nth-child(2) > button:last-child",
    );
    const screenshotsArray = previewImg
      ?.getAttribute("data-screenshots-array")
      ?.split(",")!;
    const maxPreviewImages = screenshotsArray.length - 1;

    previousBtn?.addEventListener("click", () => {
      let imageInViewNum: any = previewImg?.getAttribute("data-img-num");
      // get the current img num
      // change img src
      // add +1 to the currnet img num
      imageInViewNum--;
      if (imageInViewNum == -1) imageInViewNum = maxPreviewImages;
      previewImg?.setAttribute(
        "src",
        `/projects/${screenshotsArray[imageInViewNum]}`,
      );
      previewImg?.setAttribute("data-img-num", imageInViewNum);

      console.log(imageInViewNum);
    });

    nextBtn?.addEventListener("click", () => {
      let imageInViewNum: any = previewImg?.getAttribute("data-img-num");
      // get the current img num
      // change img src
      // add +1 to the currnet img num
      imageInViewNum++;
      if (imageInViewNum > maxPreviewImages) imageInViewNum = 0;
      previewImg?.setAttribute(
        "src",
        `/projects/${screenshotsArray[imageInViewNum]}`,
      );
      previewImg?.setAttribute("data-img-num", imageInViewNum);

      console.log(imageInViewNum);
    });

    // console.log(project1);
    // console.log(previewImg);
    // console.log(nextBtn);
    // console.log(previousBtn);
    // console.log(screenshotsArray);
  }
  // -----  YouTube embed  ----- //
  function initYouTubeEmbeds() {
    console.log("üöÄ Astro YouTube Embed Script Initialized");

    const videoEmbeds =
      document.querySelectorAll<HTMLElement>(".youtube-embed");
    console.log(`üîé Found ${videoEmbeds.length} YouTube video(s) on the page.`);

    videoEmbeds.forEach((container, index) => {
      // Check if an event listener has already been added to avoid duplicates
      if (container.dataset.listenerAdded === "true") {
        console.log(
          `‚û°Ô∏è Listener for video ${index + 1} already exists. Skipping.`,
        );
        return;
      }

      console.log(
        `‚ûï Adding click listener to video ${index + 1} (ID: ${container.dataset.videoid})`,
      );
      container.dataset.listenerAdded = "true"; // Mark as having a listener

      container.addEventListener(
        "click",
        () => {
          const videoId = container.dataset.videoid;
          console.log(`‚úÖ Click detected! Loading video ID: ${videoId}`);

          if (!videoId) {
            console.error("‚ùå Error: Video ID not found on the container.");
            return;
          }

          const iframe = document.createElement("iframe");
          iframe.src = `https://www.youtube.com/embed/${videoId}?autoplay=1&rel=0`;
          iframe.title = "YouTube video player";
          iframe.frameBorder = "0";
          iframe.allow =
            "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share";
          iframe.allowFullscreen = true;
          iframe.classList.add("w-full", "h-full");
          container.innerHTML = "";
          container.appendChild(iframe);
        },
        { once: true },
      );
    });
  }

  // This ensures the script runs on initial page load AND on page transitions with Astro's View Transitions
  document.addEventListener("astro:page-load", initYouTubeEmbeds);
  // Run it once on initial load just in case
  initYouTubeEmbeds();
</script>
